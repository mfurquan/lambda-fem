;(load "vblas")
;(load "main")
;(load "local")
;
(define (matrix-add-to! matrix loc val)
  (let ((i (car loc))
	(j (cadr loc)))
    (cond ((and (> i -1) (> j -1))
	   (matrix-set! matrix i j (+ (matrix-ref matrix i j)
				      val)))
	  ((and (> i -1) (< j 0))
	   (matrix-set! matrix i no-dof (- (matrix-ref matrix i no-dof)
				      (* val g)))))))

(define K_F (make-matrix no-dof (+ no-dof 1) 0))

(define (assemble-one-elem M me loc)
  (for-each (lambda (v p)
	      (for-each (lambda (val loc-pair)
			  (matrix-add-to! M loc-pair val))
			v p))
	    me loc))

(define (assemble-all)
  (for-each (lambda (elem-mat id-mat)
	      (assemble-one-elem K_F elem-mat id-mat))
	    (map (lambda (ien)
		   (f_k-ele (x-ele ien)))
		 (element mesh))
	    (map loc-mat (element mesh)))
  (matrix-add-to! K_F (list (id mesh no-dof) no-dof) h))
