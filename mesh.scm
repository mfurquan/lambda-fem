(load "utils")

(define (mesh-segment a b deg nelem)
  (define (gen-ien)
    (map (lambda (ielem)
	   (enumerate (* deg ielem) (+ deg 1)))
	 (enumerate 0 nelem)))
  (define (gen-x)
    (let ((nnod (+ (* deg nelem) 1)))
      (let ((h (/ (- b a) (- nnod 1))))
	(map (lambda (inod)
	       (* inod h))
	     (enumerate 0 nnod)))))
  (define (gen-id)
    (enumerate -1 (+ (* deg nelem) 1)))
    (list (gen-ien)
	  (list->vector (gen-x))
	  (list->vector (gen-id))
	  (list '(0 0) (list (- nelem 1) 1))))

(define (element mesh . loc)
  (cond ((null? loc) (car mesh))
	((null? (cdr loc)) (list-ref (car mesh) (car loc)))
	(else (list-ref (list-ref (car mesh) (car loc))
				  (cadr loc)))))

(define (node mesh . loc)
  (cond ((null? loc) (cadr mesh))
	((null? (cdr loc)) (vector-ref (cadr mesh) (car loc)))
	(else (list-ref (vector-ref (cadr mesh) (car loc))
			(cadr loc)))))

(define (id mesh . loc)
  (cond ((null? loc) (caddr mesh))
	((null? (cdr loc)) (vector-ref (caddr mesh) (car loc)))
	(else (list-ref (vector-ref (caddr mesh) (car loc))
			(cadr loc)))))

(define (bface mesh . loc)
  (if (null? loc) (cadddr mesh)
    (list-ref (cadddr mesh) (car loc))))
